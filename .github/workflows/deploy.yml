name: Deploy Personal Journal Application

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: personal-journal
  ECR_REPOSITORY_FRONTEND: personal-journal-frontend
  ECR_REPOSITORY_BACKEND: personal-journal-backend
  ECS_CLUSTER_NAME: personal-journal-cluster
  ECS_SERVICE_NAME_FRONTEND: personal-journal-frontend-service
  ECS_SERVICE_NAME_BACKEND: personal-journal-backend-service
  TERRAFORM_VERSION: 1.5.7
  TF_STATE_BUCKET: personal-journal-terraform-state
  TF_LOCK_TABLE: personal-journal-terraform-locks

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      frontend_image_tag: ${{ steps.build-image.outputs.frontend_image_tag }}
      backend_image_tag: ${{ steps.build-image.outputs.backend_image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push images
        id: build-image
        run: |
          # Set image tag using short SHA
          IMAGE_TAG=${GITHUB_SHA::8}
          echo "frontend_image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "backend_image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

          # Build and push frontend image
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${IMAGE_TAG} -f client/Dockerfile.frontend ./client
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${IMAGE_TAG}

          # Build and push backend image
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${IMAGE_TAG} -f Dockerfile.backend .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${IMAGE_TAG}

          echo "::set-output name=frontend_image::${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${IMAGE_TAG}"
          echo "::set-output name=backend_image::${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${IMAGE_TAG}"

  deploy-infra:
    name: Deploy Infrastructure
    needs: build-and-push
    runs-on: ubuntu-latest
    outputs:
      alb_dns_name: ${{ steps.terraform-output.outputs.alb_dns_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./infra
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=terraform/state/personal-journal.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        working-directory: ./infra
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./infra
        run: |
          terraform plan \
            -var="frontend_image_tag=${{ needs.build-and-push.outputs.frontend_image_tag }}" \
            -var="backend_image_tag=${{ needs.build-and-push.outputs.backend_image_tag }}" \
            -var="mongo_uri_secret_arn=${{ secrets.MONGO_URI_SECRET_ARN }}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: terraform-output
        working-directory: ./infra
        run: |
          ALB_DNS_NAME=$(terraform output -raw alb_dns_name)
          echo "alb_dns_name=${ALB_DNS_NAME}" >> $GITHUB_OUTPUT

  smoke-test:
    name: Run Smoke Tests
    needs: deploy-infra
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible and AWS CLI
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 botocore
          pip install awscli

      - name: Get previous task definitions
        id: previous-task-defs
        run: |
          FRONTEND_TASK_DEF=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER_NAME }} --services ${{ env.ECS_SERVICE_NAME_FRONTEND }} --query 'services[0].taskDefinition' --output text)
          BACKEND_TASK_DEF=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER_NAME }} --services ${{ env.ECS_SERVICE_NAME_BACKEND }} --query 'services[0].taskDefinition' --output text)
          echo "frontend_task_def=${FRONTEND_TASK_DEF}" >> $GITHUB_OUTPUT
          echo "backend_task_def=${BACKEND_TASK_DEF}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Validate environment
        working-directory: ./ansible
        run: |
          ansible-playbook main.yml -e "action=validate aws_region=${{ env.AWS_REGION }} project_name=${{ env.PROJECT_NAME }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run deployment verification and smoke tests
        id: verification
        working-directory: ./ansible
        run: |
          ansible-playbook main.yml -e "action=full aws_region=${{ env.AWS_REGION }} project_name=${{ env.PROJECT_NAME }} alb_dns_name=${{ needs.deploy-infra.outputs.alb_dns_name }} frontend_image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ needs.build-and-push.outputs.frontend_image_tag }} backend_image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ needs.build-and-push.outputs.backend_image_tag }}"
        continue-on-error: true

      - name: Rollback if verification failed
        if: steps.verification.outcome != 'success' && steps.previous-task-defs.outcome == 'success'
        working-directory: ./ansible
        run: |
          ansible-playbook main.yml -e "action=rollback aws_region=${{ env.AWS_REGION }} project_name=${{ env.PROJECT_NAME }} previous_frontend_task_def=${{ steps.previous-task-defs.outputs.frontend_task_def }} previous_backend_task_def=${{ steps.previous-task-defs.outputs.backend_task_def }}"

      - name: Fail if verification failed and rollback was not possible
        if: steps.verification.outcome != 'success' && steps.previous-task-defs.outcome != 'success'
        run: |
          echo "Deployment verification failed and rollback was not possible. Manual intervention required."
          exit 1

  notify:
    name: Send Deployment Notification
    needs: [deploy-infra, smoke-test]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Deployment Status
        run: |
          if [[ "${{ needs.smoke-test.result }}" == "success" ]]; then
            echo "Deployment completed successfully!"
            echo "Application is available at: http://${{ needs.deploy-infra.outputs.alb_dns_name }}"
          else
            echo "Deployment failed or smoke tests failed."
            exit 1
          fi
