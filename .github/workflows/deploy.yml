name: Deploy Personal Journal Application

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: personal-journal
  ECR_REPOSITORY_FRONTEND: personal-journal-frontend
  ECR_REPOSITORY_BACKEND: personal-journal-backend
  ECS_CLUSTER_NAME: personal-journal-cluster
  ECS_SERVICE_NAME_FRONTEND: personal-journal-frontend-service
  ECS_SERVICE_NAME_BACKEND: personal-journal-backend-service
  TERRAFORM_VERSION: 1.5.7
  TF_STATE_BUCKET: personal-journal-terraform-state
  TF_LOCK_TABLE: personal-journal-terraform-locks
  DEFAULT_IMAGE_TAG: latest

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    outputs:
      alb_dns_name: ${{ steps.terraform-output.outputs.alb_dns_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./infra
        shell: bash
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=terraform/state/personal-journal.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        working-directory: ./infra
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./infra
        shell: bash
        run: |
          terraform plan \
            -var="frontend_image_tag=${{ env.DEFAULT_IMAGE_TAG }}" \
            -var="backend_image_tag=${{ env.DEFAULT_IMAGE_TAG }}" \
            -var="mongo_uri_secret_arn=${{ secrets.MONGO_URI_SECRET_ARN }}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: terraform-output
        working-directory: ./infra
        shell: bash
        run: |
          # Get the raw ALB DNS name output, taking only the first line
          ALB_DNS_NAME=$(terraform output -raw alb_dns_name | head -n 1)

          # Set outputs for GitHub Actions
          echo "alb_dns_name=${ALB_DNS_NAME}" >> $GITHUB_OUTPUT

          # Print outputs for verification
          echo "ALB DNS Name: ${ALB_DNS_NAME}"
          # No need to get/output other URLs here as they aren't used directly later

  build-and-push:
    name: Build and Push Docker Images
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    outputs:
      frontend_image_tag: ${{ steps.build-image.outputs.frontend_image_tag }}
      backend_image_tag: ${{ steps.build-image.outputs.backend_image_tag }}
      aws_account_id: ${{ steps.get-account-id.outputs.aws_account_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS Account ID
        id: get-account-id
        shell: bash
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "aws_account_id=${AWS_ACCOUNT_ID}" >> $GITHUB_OUTPUT
          echo "AWS Account ID: ${AWS_ACCOUNT_ID}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push images
        id: build-image
        shell: bash
        run: |
          # Construct repository URLs
          FRONTEND_REPO_URL="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_FRONTEND}"
          BACKEND_REPO_URL="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_BACKEND}"

          # Debug: Print repository URLs
          echo "Frontend Repository URL: $FRONTEND_REPO_URL"
          echo "Backend Repository URL: $BACKEND_REPO_URL"

          # Set image tag using short SHA
          IMAGE_TAG=${GITHUB_SHA::8}
          echo "frontend_image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "backend_image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

          # Build and push frontend image
          docker build -t "${FRONTEND_REPO_URL}:${IMAGE_TAG}" -f client/Dockerfile.frontend ./client
          docker push "${FRONTEND_REPO_URL}:${IMAGE_TAG}"

          # Build and push backend image
          docker build -t "${BACKEND_REPO_URL}:${IMAGE_TAG}" -f Dockerfile.backend .
          docker push "${BACKEND_REPO_URL}:${IMAGE_TAG}"
        env:
          AWS_ACCOUNT_ID: ${{ steps.get-account-id.outputs.aws_account_id }}

  update-ecs-services:
    name: Update ECS Services
    needs: [deploy-infrastructure, build-and-push]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./infra
        shell: bash
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=terraform/state/personal-journal.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Update ECS Services with New Image Tags
        working-directory: ./infra
        shell: bash
        run: |
          # Construct repository URLs
          FRONTEND_REPO_URL="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_FRONTEND}"
          BACKEND_REPO_URL="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_BACKEND}"

          # Debug: Print image tags and repository URLs
          echo "Frontend Image Tag: $FRONTEND_IMAGE_TAG"
          echo "Backend Image Tag: $BACKEND_IMAGE_TAG"
          echo "Frontend Repository URL: $FRONTEND_REPO_URL"
          echo "Backend Repository URL: $BACKEND_REPO_URL"

          terraform apply -auto-approve \
            -var="frontend_image_tag=$FRONTEND_IMAGE_TAG" \
            -var="backend_image_tag=$BACKEND_IMAGE_TAG" \
            -var="mongo_uri_secret_arn=${{ secrets.MONGO_URI_SECRET_ARN }}"
        env:
          FRONTEND_IMAGE_TAG: ${{ needs.build-and-push.outputs.frontend_image_tag }}
          BACKEND_IMAGE_TAG: ${{ needs.build-and-push.outputs.backend_image_tag }}
          AWS_ACCOUNT_ID: ${{ needs.build-and-push.outputs.aws_account_id }}

      - name: Wait for ECS Services to Stabilize
        shell: bash
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --services ${{ env.ECS_SERVICE_NAME_FRONTEND }} ${{ env.ECS_SERVICE_NAME_BACKEND }} \
            --region ${{ env.AWS_REGION }}

  smoke-test:
    name: Run Smoke Tests
    needs: [deploy-infrastructure, update-ecs-services]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Python and Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          pip3 install ansible boto3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run deployment verification and smoke tests
        id: verification
        working-directory: ./ansible
        env:
          ALB_DNS_NAME: ${{ needs.deploy-infrastructure.outputs.alb_dns_name }}
          FRONTEND_IMAGE_TAG: ${{ needs.build-and-push.outputs.frontend_image_tag }}
          BACKEND_IMAGE_TAG: ${{ needs.build-and-push.outputs.backend_image_tag }}
          AWS_ACCOUNT_ID: ${{ needs.build-and-push.outputs.aws_account_id }}
          AWS_REGION: ${{ env.AWS_REGION }}
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          ECR_REPOSITORY_FRONTEND: ${{ env.ECR_REPOSITORY_FRONTEND }}
          ECR_REPOSITORY_BACKEND: ${{ env.ECR_REPOSITORY_BACKEND }}
        shell: bash
        run: |
          # Construct repository URLs using environment variables for this step
          FRONTEND_REPO_URL="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_FRONTEND}"
          BACKEND_REPO_URL="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_BACKEND}"

          # Debug: Print parameters
          echo "ALB DNS Name: $ALB_DNS_NAME"
          echo "Frontend Image: $FRONTEND_REPO_URL:$FRONTEND_IMAGE_TAG"
          echo "Backend Image: $BACKEND_REPO_URL:$BACKEND_IMAGE_TAG"
          echo "AWS Account ID: $AWS_ACCOUNT_ID"

          # Call ansible-playbook, passing variables via -e
          ansible-playbook main.yml -e "action=full aws_region=${AWS_REGION} project_name=${PROJECT_NAME} alb_dns_name=$ALB_DNS_NAME frontend_image=$FRONTEND_REPO_URL:$FRONTEND_IMAGE_TAG backend_image=$BACKEND_REPO_URL:$BACKEND_IMAGE_TAG"

      - name: Rollback on failure
        if: failure()
        working-directory: ./ansible
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
        shell: bash
        run: |
          echo "Previous step failed. Initiating rollback..."
          # NOTE: Rollback currently doesn't know the actual *previous* task defs.
          # Passing empty strings for now until rollback logic is enhanced.
          ansible-playbook main.yml -e "action=rollback aws_region=${AWS_REGION} project_name=${PROJECT_NAME} previous_frontend_task_def='' previous_backend_task_def=''"

      - name: Fail workflow if verification failed
        if: steps.verification.outcome != 'success'
        run: |
          echo "Smoke tests failed. Deployment has been rolled back."
          exit 1

      - name: Deployment successful
        if: steps.verification.outcome == 'success'
        run: |
          echo "Deployment successful! Application is available at http://${{ needs.deploy-infrastructure.outputs.alb_dns_name }}"
